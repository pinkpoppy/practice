Event Target:
Element in a document / document itself / Window / or any other object (such as XMLHttpRequest.)

Syntax
target.addEventListener(type, listener[, useCapture]);
target.addEventListener(type, listener[, useCapture, wantsUntrusted  ]); // Gecko/Mozilla only

type 
A string representing event type to listen for.
Fro a list of available enent types,see the event reference: 
https://developer.mozilla.org/en-US/docs/Web/API/Event/type

listener
The object that receives a notification when an event of the specified type occurs. This must be an object implementing the EventListener interface, or simply a JavaScript function.

useCapture
If true, useCapture indicates that the user wishes to initiate capture. After initiating capture, all events of the specified type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree. Events which are bubbling upward through the tree will not trigger a listener designated to use capture. See DOM Level 3 Events and JavaScript Event order for a detailed explanation. If not specified, useCapture defaults to false.

捕获阶段/目标阶段/冒泡阶段
例如,鼠标在子对象 A 上点下,首先容器 B 会接收到,这时为捕获阶段.然后传递给 A, 这是目标阶段,然后从 A 再传回给 B, 这是冒泡阶段. 这是事件的三个阶段,不过有些事件只有目标阶段,比如 TimerEvent.
可以看下:http://www.cnblogs.com/loveyouyou616/p/3916345.html

Why use addEventListener?
addEventListener is the way to register an event listener as specified in W3C DOM. Its benefits are as follows:
It allows adding more than a single handler for an event. This is particularly useful for DHTML libraries or Mozilla extensions that need to work well even if other libraries/extensions are used.
It gives you finer-grained control of the phase when the listener gets activated (capturing vs. bubbling)
It works on any DOM element, not just HTML elements.
The alternative, older way to register event listeners is described below.